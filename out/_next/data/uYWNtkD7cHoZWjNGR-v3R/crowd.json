{"pageProps":{"content":"# Old Programming Wisdom Beats Crowdsourced Advice\n\nProgrammers as a crowd, just like any large crowd, are chaotic.\nPeople find safety in following popular opinions.\nThey see it as something of high value,\nworth sacrificing trust in their own instincts.\nIt makes fads misleading and contrarians successful.\n\nMy default attitude towards something that helps in groupthink,\nlike forums and comment threads, is perceiving it as a waste of time.\n**Personal** blogs and vlogs, or essay collections are still my favorite mediums.\n\nBeing **good at avoiding groupthink**,\nwhich includes so called “industry standards,” is so on point.\nAn average set of methods of the top 50% of professionalsis a way different\nthing than what you get by analyzing how the top few % operates.\nWhen someone starts advising with, “today, most people,”\nI wouldn't expect a productive discussion.\n\nOk, now something more concrete.\nBelow is a couple of quotes of people who did something right and we can learn from.\nIt's not a kind of content you see often.\nThere are many programs written in contradiction to these ideas.\n(Note: it's not a top-list.)\n\n<blockquote>\nSomehow the idea of reusability got attached to object-oriented programming\nin the 1980s, and no amount of evidence to the contrary seems to be able\nto shake it free. But although some object-oriented software is reusable,\nwhat makes it reusable is its bottom-upness, not its object-orientedness.\nConsider libraries: they're reusable because they're language,\nwhether they're written in an object-oriented style or not.\n\n— Paul Graham, [*The Hundred-Year Language*](http://www.paulgraham.com/hundred.html).\n</blockquote>\n\n<br/>\n\n<div class=\"video-wrapper\">\n    <iframe\n      src=\"https://www.youtube.com/embed/75Ju0eM5T2c\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen>\n    </iframe>\n</div>\n\n— Donald Knuth, *Web of Stories*.\n\n<br>\n\n<blockquote>\nAbstraction trades an increase in real complexity for a decrease\nin perceived complexity. That isn't always a win.\n</blockquote>\n\n— [John Carmack](https://twitter.com/id_aa_carmack/status/835164026984243201)\n\n<br>\n\n<blockquote>\nThe problem with object-oriented languages is they’ve got all this\nimplicit environment that they carry around with them.\nYou wanted a banana but what you got was a gorilla holding the banana\nand the entire jungle.\n</blockquote>\n\n<blockquote>\nIf you have referentially transparent code,\nif you have pure functions — all the data comes in its input arguments\nand everything goes out and leave no state behind — it’s incredibly reusable.\n</blockquote>\n\n— Joe Armstrong, *Coders at Work*.\n\n<br>\n\n<blockquote>\nThe World Wide Web was precisely what we were trying to PREVENT —\never-breaking links, links going outward only,\nquotes you can't follow to their origins, no version management, no rights management.\n</blockquote>\n\n— [Ted Nelson](http://xanadu.com.au/ted/XU/XuPageKeio.html)\n\n<small>2018-08-04</small>\n"},"__N_SSG":true}