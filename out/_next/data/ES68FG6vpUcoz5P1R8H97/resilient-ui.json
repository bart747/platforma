{"pageProps":{"htmlContent":"<h1>5 Notes on How to Design a Resilient UI</h1>\n<p>The most interesting things happen once your software is in real use.\nThat's when you can see what's working and what to change.</p>\n<p>It brings us to the problem of editing an already working thing.\nIn the wild.\nIt happens all the time. Don't think you can predict the future.\nYou need to design your software with ease of modification in mind.</p>\n<p>Here are some ideas on how to do that:</p>\n<h3>Modularity</h3>\n<p>Modular UIs are easier to edit in the long run.\nWhen your interface is divided into distinct parts, you can also separate chunks of code by following those divisions.\nThat way changes will be way less tedious. For instance:</p>\n<ol>\n<li>You can just swap UI modules in an HTML or template file.</li>\n<li>You can edit a module in its specific file — no need to dig into complex code that's responsible for many things.</li>\n</ol>\n<h3>Embrace Foundations</h3>\n<p>If I need to pick between working on something essential or adding bells and whistles, I pick essentials.\nIt's just hard to be good at all of them, so why even focus on <em>nice-to-haves</em>? What usually pisses people off is fundamentals refusing to work as they should — not lack of <em>mustard yellow</em> in a color palette.</p>\n<p>Working extra on things like clarity (intuitiveness, readability) and speed\nwill give you more than any neophiliac thing.</p>\n<h3>Simplicity is Tricky</h3>\n<p>It's easy to achieve perceived simplicity and pay for it with real complexity.\nFor instance, you can make an intuitive UI while ignoring the clarity of its implementation.\nSooner or later it will cause all kinds of unexpected problems.\nThe real simplicity of an interface means neat visuals <strong>and</strong> clear implementation.\nTo achieve that, you often need to sacrifice some non-crucial features.\nAnd remember about <em>YAGNI</em>.</p>\n<h3>Smooth Interactions</h3>\n<p>There's an overwhelming variety of internet browsing devices on the market.\nWe need to think about what will make the product work smoothly on sub-average hardware and half-decent wi-fi.\nPeople will often use your stuff at train stations, airports, or restaurants. And they will use more than one app/website at the same time. How many browser tabs do you have open right now?</p>\n<p>(There's a good article in this matter: <a href=\"http://prog21.dadgum.com/61.html\">Optimizing for Fan Noise</a>)</p>\n<h3>Words Win</h3>\n<p>People say “a picture is like a thousand words”.\nBut a picture will not make a proposition as clear and precise as a well-designed sentence or phrase.\nText is also trivial to edit.\nThat's why I like typography — it's a tool to achieve clarity and flexibility.</p>\n<p>Don't overthink that weird icon. If it's not obvious, the text will be better.</p>\n<p><code>2017-04-05</code></p>","title":"5 Notes on How to Design a Resilient UI"},"__N_SSG":true}